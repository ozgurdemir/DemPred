package dempred.datastructure;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

import dempred.featuregeneration.FeatureGeneratorInterface;
import dempred.featureselection.FeatureSubset;
import dempred.fmath.FVector;
import dempred.grouper.GrouperInterface;

public class DatasetManipulator {
	private static final Logger logger = Logger.getLogger(DatasetManipulator.class.getName());

	public static <T extends Datapoint> void generateFeatures(Dataset<T> dataset, FeatureGeneratorInterface<T> featureGenerator) throws Exception {
		int numFeatures = -1;
		int index = 0;
		for (T datapoint : dataset.getDatapoints()) {
			logger.fine(String.format("generating features for datapoint %d of %d", ++index, dataset.size()));
			datapoint.setFeatureVector(new FVector(featureGenerator.generateFeature(datapoint)));
			numFeatures = datapoint.getNumFeatures();
		}
		dataset.initFeatureIndex(numFeatures);
		dataset.setFeatureNames(featureGenerator.getNames(dataset.getDatapoint(0)));
	}

	public static <T extends Datapoint> void generateFeatures(T datapoint, FeatureGeneratorInterface<T> featureGenerator) throws Exception {
		datapoint.setFeatureVector(new FVector(featureGenerator.generateFeature(datapoint)));
	}

	public static <T extends Datapoint> void squareFeatures(Dataset<T> dataset) {
		int numSquareFeatures = 0;
		for (T datapoint : dataset.getDatapoints()) {
			double[] linearFeatures = datapoint.getFeatureVector().getElements();
			int d = linearFeatures.length;
			numSquareFeatures = (int) (d + d * (d + 1.0) / 2.0);
			double[] squareFeatures = new double[numSquareFeatures];
			int index = 0;
			for (int i = 0; i < d; ++i) {
				squareFeatures[index++] = linearFeatures[i];
				for (int j = i; j < d; ++j)
					squareFeatures[index++] = linearFeatures[i] * linearFeatures[j];
			}
			datapoint.setFeatureVector(new FVector(squareFeatures));
		}
		dataset.initFeatureIndex(numSquareFeatures);
		List<String> originalFeatureNames = dataset.getFeatureNames();
		int d = originalFeatureNames.size();
		List<String> featureNames = new ArrayList<String>(numSquareFeatures);
		for (int i = 0; i < d; ++i) {
			featureNames.add(originalFeatureNames.get(i));
			for (int j = i; j < d; ++j)
				featureNames.add(originalFeatureNames.get(i) + " * " + originalFeatureNames.get(j));
		}
		dataset.setFeatureNames(featureNames);
	}

	public static <T extends Datapoint> void addFeatures(Dataset<T> dataset, FeatureGeneratorInterface<T> featureGenerator) throws Exception {
		int numFeatures = -1;
		for (T datapoint : dataset.getDatapoints()) {
			double[] oldFeatures = datapoint.getFeatureVector().getElements();
			double[] newFeatures = featureGenerator.generateFeature(datapoint);
			double[] features = new double[oldFeatures.length + newFeatures.length];
			System.arraycopy(oldFeatures, 0, features, 0, oldFeatures.length);
			System.arraycopy(newFeatures, 0, features, oldFeatures.length, newFeatures.length);
			datapoint.setFeatureVector(new FVector(features));
			numFeatures = datapoint.getNumFeatures();
		}
		dataset.initFeatureIndex(numFeatures);
		dataset.getFeatureNames().addAll(featureGenerator.getNames(dataset.getDatapoint(0)));
	}

	public static <T extends Datapoint> void addFeatures(T datapoint, FeatureGeneratorInterface<T> featureGenerator) throws Exception {
		double[] oldFeatures = datapoint.getFeatureVector().getElements();
		double[] newFeatures = featureGenerator.generateFeature(datapoint);
		double[] features = new double[oldFeatures.length + newFeatures.length];
		System.arraycopy(oldFeatures, 0, features, 0, oldFeatures.length);
		System.arraycopy(newFeatures, 0, features, oldFeatures.length, newFeatures.length);
		datapoint.setFeatureVector(new FVector(features));
	}

	public static FVector[] getFeatureVectors(Dataset<?> dataset) {
		FVector[] featureVectors = new FVector[dataset.numFeatures()];
		for (int i = 0; i < featureVectors.length; ++i) {
			double[] features = new double[dataset.size()];
			for (int j = 0; j < dataset.size(); ++j)
				features[j] = dataset.getDatapoint(j).getFeatureAt(i);
			FVector featureVector = new FVector(features);
			featureVectors[i] = featureVector;
		}
		return featureVectors;
	}

	public static Map<String, FVector> getFeatureMap(Dataset<?> dataset) {
		HashMap<String, FVector> featureMap = new HashMap<String, FVector>(dataset.numFeatures());
		List<String> featureNames = dataset.getFeatureNames();
		for (int i = 0; i < featureNames.size(); ++i) {
			double[] features = new double[dataset.size()];
			for (int j = 0; j < dataset.size(); ++j)
				features[j] = dataset.getDatapoint(j).getFeatureAt(i);
			FVector featureVector = new FVector(features);
			featureMap.put(featureNames.get(i), featureVector);
		}
		return featureMap;
	}

	public static FVector[] getFeatureVectors(Dataset<?> dataset, FeatureSubset subset) {
		FVector[] featureVectors = new FVector[subset.size()];
		int index = 0;
		for (int featureIndex : subset.getFeatureIndices()) {
			double[] features = new double[dataset.size()];
			for (int j = 0; j < dataset.size(); ++j)
				features[j] = dataset.getDatapoint(j).getFeatureAt(featureIndex);
			FVector featureVector = new FVector(features);
			featureVectors[index++] = featureVector;
		}
		return featureVectors;
	}

	public static FVector getClassVector(Dataset<?> dataset) {
		FVector vecY = new FVector(dataset.size());
		int i = 0;
		for (Datapoint datapoint : dataset.getDatapoints())
			vecY.set(i++, datapoint.getGroup());
		return vecY;
	}

	public static FVector getValueVector(Dataset<?> dataset) {
		FVector vecY = new FVector(dataset.size());
		int i = 0;
		for (Datapoint datapoint : dataset.getDatapoints())
			vecY.set(i++, datapoint.getValue());
		return vecY;
	}

	public static FVector getWeightVector(Dataset<?> dataset) {
		FVector vecY = new FVector(dataset.size());
		int i = 0;
		for (Datapoint datapoint : dataset.getDatapoints())
			vecY.set(i++, datapoint.getWeight());
		return vecY;
	}

	public static void updateGrouping(Dataset<?> dataset, GrouperInterface grouper) {
		HashMap<Integer, Integer> groupCounter = new HashMap<Integer, Integer>();
		int numPos = 0;
		int numNeg = 0;
		for (Datapoint datapoint : dataset.getDatapoints()) {
			int group = grouper.getGroup(datapoint.getValue());
			if (group == 1) {
				datapoint.setGroup(+1);
				++numPos;
			} else {
				datapoint.setGroup(-1);
				++numNeg;
			}
		}
		groupCounter.put(-1, numNeg);
		groupCounter.put(+1, numPos);
		dataset.setGroupCounter(groupCounter);
	}

	public static void deleteFeatureVectors(Dataset<?> dataset) {
		for (Datapoint datapoint : dataset.getDatapoints()) {
			datapoint.setFeatureVector(new FVector(0));
		}
		dataset.initFeatureIndex(0);
		dataset.setFeatureNames(null);
	}

}
