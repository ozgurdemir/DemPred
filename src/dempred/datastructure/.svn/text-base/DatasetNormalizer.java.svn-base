package dempred.datastructure;

import java.io.Serializable;
import java.util.Arrays;

import dempred.fmath.FVector;

public class DatasetNormalizer implements Serializable {

	private static final long serialVersionUID = 7817284463812821189L;
	private FVector meanVector;
	private FVector stdVector;
	private int[] zeroIndices;
	private int[] nonZeroIndices;

	public DatasetNormalizer() {

	}

	public DatasetNormalizer(Dataset<?> dataset) {
		train(dataset);
	}

	public DatasetNormalizer(FVector meanVector, FVector stdVector, int[] zeroIndices) {
		super();
		this.meanVector = meanVector;
		this.stdVector = stdVector;
		this.zeroIndices = zeroIndices;
	}

	public void train(Dataset<?> dataset) {
		meanVector = getMean(dataset);
		stdVector = getStandart(dataset, meanVector);
		zeroIndices = stdVector.findIndices("==", 0.0);
		nonZeroIndices = stdVector.findIndices("!=", 0.0);
		meanVector.delete(zeroIndices);
		stdVector.delete(zeroIndices);
	}

	public void normalize(Dataset<?> dataset) {
		dataset.deleteFeatures(zeroIndices);
		substractMean(dataset, meanVector);
		divStandart(dataset, stdVector);
	}

	public void normalize(Datapoint datapoint) {
		FVector featureVector = datapoint.getFeatureVector();
		featureVector.delete(zeroIndices);
		featureVector.subVector(meanVector);
		featureVector.divVector(stdVector);
	}

	public FVector getMean(Dataset<?> dataset) {
		FVector meanVector = new FVector(dataset.numFeatures(), 0.0);
		for (Datapoint datapoint : dataset.getDatapoints()) {
			meanVector.addVector(datapoint.getFeatureVector());
		}
		meanVector.divScalarZero(dataset.size());
		return meanVector;
	}

	public void substractMean(Dataset<?> dataset, FVector meanVector) {
		for (Datapoint datapoint : dataset.getDatapoints()) {
			datapoint.getFeatureVector().subVector(meanVector);
		}
	}

	public FVector getStandart(Dataset<?> dataset, FVector meanVector) {
		FVector tempVector;
		FVector sumVector = new FVector(dataset.numFeatures(), 0.0);
		for (Datapoint datapoint : dataset.getDatapoints()) {
			tempVector = datapoint.getFeatureVector().clone();
			tempVector.subVector(meanVector);
			tempVector.powScalar(2);
			sumVector.addVector(tempVector);
		}
		sumVector.divScalarZero(dataset.size() - 1);
		sumVector.powScalar(0.5);
		return sumVector;
	}

	public FVector getStandart(Dataset<?> dataset) {
		return getStandart(dataset, getMean(dataset));
	}

	public void divStandart(Dataset<?> dataset, FVector stdVector) {
		for (Datapoint datapoint : dataset.getDatapoints()) {
			datapoint.getFeatureVector().divVector(stdVector);
		}
	}

	public void prune(int[] indices) {
		meanVector.delete(indices);
		stdVector.delete(indices);
		zeroIndices = new int[0];
		nonZeroIndices = new int[meanVector.size()];
		for (int i = 0; i < nonZeroIndices.length; ++i)
			nonZeroIndices[i] = i;
	}

	public String toString() {
		String lineseperator = System.getProperty("line.separator");
		StringBuffer strBuf = new StringBuffer();
		strBuf.append(meanVector.toString());
		strBuf.append(lineseperator);
		strBuf.append(stdVector.toString());
		strBuf.append(lineseperator);
		strBuf.append(Arrays.toString(zeroIndices));
		strBuf.append(lineseperator);
		strBuf.append(Arrays.toString(nonZeroIndices));
		strBuf.append(lineseperator);
		return strBuf.toString();
	}

	public FVector getMeanVector() {
		return meanVector;
	}

	public void setMeanVector(FVector meanVector) {
		this.meanVector = meanVector;
	}

	public FVector getStdVector() {
		return stdVector;
	}

	public void setStdVector(FVector stdVector) {
		this.stdVector = stdVector;
	}

	public int[] getZeroIndices() {
		return zeroIndices;
	}

	public void setZeroIndices(int[] zeroIndices) {
		this.zeroIndices = zeroIndices;
	}

	public final int[] getNonZeroIndices() {
		return nonZeroIndices;
	}

}
