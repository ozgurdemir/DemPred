package dempred.fmath;

public class FVectorMetric {

	public static double scalarProd(FVector a, FVector b) {
		return a.scalarProduct(b);
	}

	public static double euclidean(FVector a, FVector b) {
		FVector tmp = a.clone();
		tmp.subVector(b);
		tmp.powScalar(2);
		return Math.pow(tmp.sum(), 0.5);
	}

	public static double jaccard(FVector a, FVector b) {
		double dot = a.scalarProduct(b);
		double euclA = a.normRadical(2);
		double euclB = b.normRadical(2);
		return 1 - (dot / (euclA * euclB));
	}

	public static double cosine(FVector a, FVector b) {
		double dot = a.scalarProduct(b);
		double euclA = a.normRadical(2);
		double euclB = b.normRadical(2);
		return (dot / (euclA * euclB));
	}

	public static double pcc(FVector vec1, FVector vec2) {
		double meanVec1 = vec1.mean();
		double stdVec1 = vec1.std(meanVec1);
		double meanVec2 = vec2.mean();
		double stdVec2 = vec2.std(meanVec2);
		FVector temp1 = vec1.clone();
		double meanVec1Vec2 = (temp1.mulVector(vec2)).mean();
		return (meanVec1Vec2 - meanVec1 * meanVec2) / (stdVec1 * stdVec2);
	}

}
